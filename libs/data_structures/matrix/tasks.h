//
// Created by Admin on 30.03.2022.
//

#ifndef LABS_LIBS_TASKS_H
#define LABS_LIBS_TASKS_H

#include "matrix.h"

int getMax(const int *const a, const int size);

//–ú–µ–Ω—è–µ—Ç –º–µ—Å—Ç–∞–º–∏ —Å—Ç—Ä–æ–∫–∏,
//–≤ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞—Ö–æ–¥—è—Ç—Å—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç—ã
void swapMinAndMaxRows(matrix m)

//–†–∞—Å–ø–æ–ª–∞–≥–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏ –º–∞—Ç—Ä–∏—Ü—ã –ø–æ –Ω–µ—É–±—ã–≤–∞–Ω–∏—é –Ω–∞–∏–±–æ–ª—å—à–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å—Ç—Ä–æ–∫
void sortColsByMinElement(matrix m);

int getMin(int *a, int size);

//–†–∞—Å–ø–æ–ª–∞–≥–∞–µ—Ç —Å—Ç–æ–ª–±—Ü—ã –º–∞—Ç—Ä–∏—Ü—ã –ø–æ –Ω–µ—É–±—ã–≤–∞–Ω–∏—é
//–º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å—Ç–æ–ª–±—Ü–æ–≤
void sortRowsByMaxElement(matrix m);

matrix mulMatrices(matrix m1, matrix m2);

//–ó–∞–º–µ–Ω—è–µ—Ç ùê¥ –µ–µ –∫–≤–∞–¥—Ä–∞—Ç–æ–º –µ—Å–ª–∏ –¥–∞–Ω–Ω–∞—è –∫–≤–∞–¥—Ä–∞—Ç–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ ùê¥ —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–∞
void getSquareOfMatrixIfSymmetric(matrix *m);

long long getSum(int *a, int n);

bool isUnique(long long *a, int n);

//–¢—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä—É–µ—Ç –º–∞—Ç—Ä–∏—Ü—É –µ—Å–ª–∏ —Å—Ä–µ–¥–∏ —Å—É–º–º —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å—Ç—Ä–æ–∫ –º–∞—Ç—Ä–∏—Ü—ã –Ω–µ—Ç —Ä–∞–≤–Ω—ã—Ö
void transposeIfMatrixHasNotEqualSumOfRows(matrix m);

//–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç 1 –µ—Å–ª–∏ –º–∞—Ç—Ä–∏—Ü—ã –≤–∑–∞–∏–º–Ω–æ –æ–±—Ä–∞—Ç–Ω—ã,
//0 - –µ—Å–ª–∏ –Ω–µ –≤–∑–∞–∏–º–æ –æ–±—Ä–∞—Ç–Ω—ã
bool isMutuallyInverseMatrices(matrix m1, matrix m2);

#endif //LABS_LIBS_TASKS_H
